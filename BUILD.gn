# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the root build file for GN. GN will start processing by loading this
# file, and recursively load all dependencies until all dependencies are either
# resolved or known not to exist (which will cause the build to fail). So if
# you add a new build file, there must be some path of dependencies from this
# file to your new one or GN won't know about it.

import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/sanitizers/sanitizers.gni")

if (is_android) {
  import("//build/config/android/config.gni")
}

declare_args() {
  # A list of extra dependencies to add to the root target. This allows a
  # checkout to add additional targets without explicitly changing any checked-
  # in files.
  root_extra_deps = []
}

# This file defines the following two main targets:
#
# "gn_all" is used to create explicit dependencies from the root BUILD.gn to
# each top-level component that we wish to include when building everything via
# "all". This is required since the set of targets built by "all" is determined
# automatically based on reachability from the root BUILD.gn (for details, see
# crbug.com/503241). Builders should typically use "all", or list targets
# explicitly, rather than relying on "gn_all".
#
# "gn_visibility": targets that are normally not visible to top-level targets,
# but are built anyway by "all". Since we don't want any such targets, we have
# this placeholder to make sure hidden targets that aren't otherwise depended
# on yet are accounted for.

group("gn_all") {
  testonly = true

  deps = [
    ":gn_visibility",
    "//base:base_perftests",
    "//base:base_unittests",
    "//net:net_unittests",

    #    "//tools/binary_size:binary_size_trybot_py",
    "//url:url_unittests",
  ]

  if (!is_ios && !is_android && !is_chromecast && !is_fuchsia) {
    deps += [
      "//net:hpack_example_generator",
      #"//tools/perf/clear_system_cache",
      #"//tools/traffic_annotation/auditor:traffic_annotation_auditor",
      #"//tools/traffic_annotation/auditor:traffic_annotation_auditor_unittests",
    ]
  }

  if (!is_ios) {
    deps += [
      "//ipc:ipc_tests",
      "//net:net_perftests",
      "//url/ipc:url_ipc_unittests",
    ]
  }

  deps += root_extra_deps

  if (is_linux) {
    # The following are definitely linux-only.
    deps += [
      "//net:disk_cache_memory_test",
      "//net:quic_client",
      "//net:quic_server",
      "//testing:empty_main",
    ]
  }

  if (is_ios || is_win || (is_linux && !is_chromeos)) {
    deps += [ "//base:base_i18n_perftests" ]
  }

  # TODO(GYP): Figure out which of these should (and can) build
  # for chromeos/ios.
  if (!is_chromeos && !is_ios && !is_fuchsia) {
    deps += [
      "//base:build_utf8_validator_tables",
      "//base:check_example",
      "//net:dump_cache",
    ]

    if (!is_android) {
      deps += [
        "//net:crash_cache",
        "//net:dns_fuzz_stub",
        "//net:net_watcher",  # TODO(GYP): This should be conditional on use_v8_in_net
        "//net:run_testserver",
        "//net:stress_cache",
        "//net:tld_cleanup",
      ]
    }

  }

  if (is_win) {
    deps += [
      "//base:pe_image_test",
      "//net:quic_client",
      "//net:quic_server",
      "//testing/gtest:gtest_main",
    ]
  }

  if (target_cpu == "x86" || target_cpu == "x64") {
    #      deps += [ "//third_party/libjpeg_turbo:simd_asm" ]
  }

  if ((is_linux && !is_chromeos && !is_chromecast) ||
      (is_win && (use_drfuzz || use_libfuzzer)) || (use_libfuzzer && is_mac)) {
    deps += [
      "//testing/libfuzzer/fuzzers",
      "//testing/libfuzzer/tests:libfuzzer_tests",
      "//third_party/icu/fuzzers",
    ]
  }
}

group("gn_visibility") {
  deps = [
    #"//build/config/sanitizers:options_sources",
    # "//third_party/pdfium:pdfium_embeddertests",  # TODO(GYP): visibility?
    # "//third_party/pdfium:pdfium_unittests",  # TODO(GYP): visibility?
  ]

}