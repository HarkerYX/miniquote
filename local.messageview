ipc/ipc_message_pipe_reader.cc:66:  sender_->Receive(MessageView(*message, std::move(handles)));
ipc/ipc_message_pipe_reader.cc:84:void MessagePipeReader::Receive(MessageView message_view) {
ipc/ipc_message_pipe_reader.h:97:  void Receive(MessageView message_view) override;
ipc/ipc_mojo_bootstrap_unittest.cc:75:  void Receive(IPC::MessageView message_view) override {
ipc/ipc_mojo_bootstrap_unittest.cc:197:      IPC::MessageView(mojo_base::BigBufferView(base::make_span(&data, 0)),
ipc/message.typemap:18:type_mappings = [ "IPC.mojom.Message=IPC::MessageView[move_only]" ]
ipc/message_mojom_traits.cc:13:StructTraits<IPC::mojom::MessageDataView, IPC::MessageView>::buffer(
ipc/message_mojom_traits.cc:14:    IPC::MessageView& view) {
ipc/message_mojom_traits.cc:20:StructTraits<IPC::mojom::MessageDataView, IPC::MessageView>::handles(
ipc/message_mojom_traits.cc:21:    IPC::MessageView& view) {
ipc/message_mojom_traits.cc:26:bool StructTraits<IPC::mojom::MessageDataView, IPC::MessageView>::Read(
ipc/message_mojom_traits.cc:28:    IPC::MessageView* out) {
ipc/message_mojom_traits.cc:36:  *out = IPC::MessageView(std::move(buffer_view), std::move(handles));
ipc/message_mojom_traits.h:20:class StructTraits<IPC::mojom::MessageDataView, IPC::MessageView> {
ipc/message_mojom_traits.h:22:  static mojo_base::BigBufferView buffer(IPC::MessageView& view);
ipc/message_mojom_traits.h:24:      IPC::MessageView& view);
ipc/message_mojom_traits.h:26:  static bool Read(IPC::mojom::MessageDataView data, IPC::MessageView* out);
ipc/message_view.cc:9:MessageView::MessageView() = default;
ipc/message_view.cc:11:MessageView::MessageView(
ipc/message_view.cc:19:MessageView::MessageView(
ipc/message_view.cc:24:MessageView::MessageView(MessageView&&) = default;
ipc/message_view.cc:26:MessageView::~MessageView() = default;
ipc/message_view.cc:28:MessageView& MessageView::operator=(MessageView&&) = default;
ipc/message_view.h:19:class COMPONENT_EXPORT(IPC_MOJOM) MessageView {
ipc/message_view.h:21:  MessageView();
ipc/message_view.h:22:  MessageView(
ipc/message_view.h:25:  MessageView(
ipc/message_view.h:28:  MessageView(MessageView&&);
ipc/message_view.h:29:  ~MessageView();
ipc/message_view.h:31:  MessageView& operator=(MessageView&&);
ipc/message_view.h:51:  DISALLOW_COPY_AND_ASSIGN(MessageView);
mojo/core/channel_fuchsia.cc:129:class MessageView {
mojo/core/channel_fuchsia.cc:132:  MessageView(Channel::MessagePtr message, size_t offset)
mojo/core/channel_fuchsia.cc:139:  MessageView(MessageView&& other) { *this = std::move(other); }
mojo/core/channel_fuchsia.cc:141:  MessageView& operator=(MessageView&& other) {
mojo/core/channel_fuchsia.cc:148:  ~MessageView() {}
mojo/core/channel_fuchsia.cc:188:  DISALLOW_COPY_AND_ASSIGN(MessageView);
mojo/core/channel_fuchsia.cc:227:      if (!WriteNoLock(MessageView(std::move(message), 0)))
mojo/core/channel_fuchsia.cc:381:  bool WriteNoLock(MessageView message_view) {
mojo/core/channel_posix.cc:44:class MessageView {
mojo/core/channel_posix.cc:47:  MessageView(Channel::MessagePtr message, size_t offset)
mojo/core/channel_posix.cc:54:  MessageView(MessageView&& other) { *this = std::move(other); }
mojo/core/channel_posix.cc:56:  MessageView& operator=(MessageView&& other) {
mojo/core/channel_posix.cc:63:  ~MessageView() {}
mojo/core/channel_posix.cc:91:  DISALLOW_COPY_AND_ASSIGN(MessageView);
mojo/core/channel_posix.cc:168:        if (!WriteNoLock(MessageView(std::move(message), 0)))
mojo/core/channel_posix.cc:501:  bool WriteNoLock(MessageView message_view) {
mojo/core/channel_posix.cc:590:    base::circular_deque<MessageView> messages;
mojo/core/channel_posix.cc:724:  base::circular_deque<MessageView> outgoing_messages_;
